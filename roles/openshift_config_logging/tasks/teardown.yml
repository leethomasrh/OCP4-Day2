- fail:
    msg: "Make sure we've authenticated to the cluster before running this role"
  when: k8s_auth_results.k8s_auth.api_key is not defined

- name: Teardown Cluster Logging
  block:
  - name: Remove clusterlogging custom resource definition
    k8s:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      state: absent
      resource_definition: "{{ lookup('template', 'clusterlogging-crd.yaml.j2') }}"
      validate_certs: no

  - name: Remove operator group and subscription
    k8s:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      state: absent
      resource_definition: "{{ lookup('template', 'operatorgroup.j2') }}"
      validate_certs: no

  - name: Remove elastic search operator namespace
    k8s:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      name: openshift-operators-redhat
      api_version: v1
      kind: Namespace
      state: absent

  - name: Remove elastic search namespace
    k8s:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      name: openshift-logging
      api_version: v1
      kind: Namespace
      state: absent

  - name: Pause while logging objects are deleted
    pause:
      minutes: 1

  - name: Get list of elasticsearch clusterserviceversion objects
    vars:
      # !unsafe tag tells ansible not to interpret any special characters
      go_template: !unsafe '{{ range .items }}{{ if eq (printf "%.13s" .metadata.name) "elasticsearch" }}{{ "- name: " }}{{ .metadata.name }} {{ "\n  namespace: " }}{{ .metadata.namespace }}{{ "\n" }}{{ end }}{{ end }}'
    shell: "oc
           get
           clusterserviceversion
           --all-namespaces
           --config {{ openshift_tmp_kubeconfig_path }}
           -o go-template='{{ go_template }}'"
    register: csvs
    changed_when: false

  - name: Delete all elasticsearch clusterserviceversion objects.
    k8s:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      state: absent
      resource_definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        metadata:
          name: "{{ item.name }}"
          namespace: "{{ item.namespace }}"
    loop: "{{ (csvs.stdout | from_yaml)['items']
             | map(attribute='name')
             | list }}"
    when: csvs.stdout != ""
